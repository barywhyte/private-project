stages:
  - test
  - build      # build only (no push)
  - security   # scan before push
  - release    # push to registry



# First job run test
run_test:
  stage: test
  image: "python:3.11-slim"
  before_script:
    - apt-get update && apt-get install -y make
    - pip install -r requirements.txt

  script:
    - pytest

# Second job run build and scan vulnerabilities
build_image:
  stage: build
  variables:
    IMAGE_NAME: "docker.io/barywhyte/api"
    IMAGE_TAG: "$CI_COMMIT_SHORT_SHA"
    DOCKER_TLS_CERDIR: "/certs"
  image: "docker:28.2.2-cli"
  services:
    - docker:28.2.2-dind

  before_script:
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $TRIVY_VERSION
    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -

  script:
    # Build image
    - docker buildx build --platform linux/arm64 -t $IMAGE_NAME:$IMAGE_TAG .
    # Download vulnerability DB first
    - ./trivy image --download-db-only

     # Build report
    - echo "##[section] Generating Reports for HIGH and CRITICAL Vulnerabilities"
    - ./trivy image --scanners vuln --vuln-type library --severity HIGH,CRITICAL  --format template --template "@contrib/gitlab.tpl" -o gl-container-scanning-report.json $IMAGE_NAME:$IMAGE_TAG

    # generate sbom
    - trivy image --format cyclonedx --output sbom.json $IMAGE_NAME:$IMAGE_TAG
  allow_failure: true
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json

# run manifests scanning for misconfig
checkov_scan_operations:
  stage: security
  image: bridgecrew/checkov:latest
  script:
    - git fetch origin operations
    - git checkout origin/operations
    - checkov -d . -o cli
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  needs: [build_image]

# run infra code scanning
checkov_scan_infra:
  stage: security
  image: bridgecrew/checkov:latest
  script:
    - git fetch origin infra
    - git checkout origin/infra
    - checkov -d . -o cli
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  needs: [checkov_scan_operations]


push_image:
  stage: release
  variables:
    IMAGE_NAME: "docker.io/barywhyte/api"
    IMAGE_TAG: "$CI_COMMIT_SHORT_SHA"
    DOCKER_TLS_CERDIR: "/certs"
  image: "docker:28.2.2-cli"
  services:
    - docker:28.2.2-dind

  before_script:
    - docker info
    - docker login -u "$REGISTRY_USER" -p "$REGISTRY_PASS"

  script:
    - docker buildx build --platform linux/arm64 -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push "$IMAGE_NAME:$IMAGE_TAG"

     Tag as "latest" ONLY if this is the default branch
    - |
      if [ "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ]; then
        docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
        docker push $IMAGE_NAME:latest
      fi
