stages:
  - test
  - build


# First job run test
run_test:
  stage: test
  image: "python:3.11-slim"
  before_script:
    - apt-get update && apt-get install -y make
    - pip install -r requirements.txt

  script:
    - pytest

# Second job run build and push image
build_image:
  stage: build
  variables:
    IMAGE_NAME: "docker.io/barywhyte/api"
    IMAGE_TAG: "$CI_COMMIT_SHORT_SHA"
    DOCKER_TLS_CERDIR: "/certs"
  image: "docker:28.2.2-cli"
  services:
    - docker:28.2.2-dind

  before_script:
    - docker info
    - docker login -u "$REGISTRY_USER" -p "$REGISTRY_PASS"

  script:
    - docker buildx build --platform linux/arm64 -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push "$IMAGE_NAME:$IMAGE_TAG"

    # Tag as "latest" ONLY if this is the default branch
    - |
      if [ "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ]; then
        docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
        docker push $IMAGE_NAME:latest
      fi

# run vulnerabilities scanning
trivy_scan:
  stage: security
  image: aquasec/trivy:latest
  script:
    - trivy version
    - trivy image --exit-code 1 --severity HIGH,CRITICAL "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}" || exit 1
  allow_failure: false
  needs: [build_image]

# run infra code scanning
checkov_scan_infra:
  stage: test
  image: bridgecrew/checkov:latest
  script:
    - git fetch origin infra
    - git checkout origin/infra
    - checkov -d . -o cli
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

# run manifests scanning for misconfig
checkov_scan_operations:
  stage: test
  image: bridgecrew/checkov:latest
  script:
    - git fetch origin operations
    - git checkout origin/operations
    - checkov -d . -o cli
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

# generate sbom
generate_sbom:
  stage: build
  image: ghcr.io/anchore/syft:latest
  script:
    - syft "$IMAGE_NAME:$IMAGE_TAG" -o json > sbom.json
  needs:
    - job: build_image
